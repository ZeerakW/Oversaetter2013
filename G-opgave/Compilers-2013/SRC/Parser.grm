/** Tokens **/

/* Literals */
%token <string*(int*int)> ID				/* Type, position(line, char position) */
%token <int*(int*int)> NUMLIT				/* Type, position (line,char position) */
%token <bool*(int*int)> LOGLIT              /* Type, position (line,char position) */
%token <char*(int*int)> CHALIT              /* Type, position (line,char position) */
%token <string*(int*int)> STRLIT            /* Type, position (line,char position) */

/* Keywords */
%token <(int*int)> PROGRAM FUNCTION PROCEDURE VAR BEGIN END IF THEN ELSE
%token <(int*int)> WHILE DO RETURN

/* Type Keywords */
%token <(int*int)> INT CHAR BOOL ARRAY OF

/* Symbols */
%token <(int*int)> SEMICOLON COLON COMMA ASSIGN EOF  /* ASSIGN = ':=' */

/* Arithmetic */
%token <(int*int)> PLUS MINUS TIMES DIVIDE EQUAL LESS AND OR NOT

/* Parantheses */
%token <(int*int)> LPAR RPAR RCBR LCBR LBRA RBRA    /* RCBR = Right Curly Brace, ... */

/* VARIOUS - Dont know if they are neccessary! */
%token <(int*int)> TRUE FALSE

%start Prog

/* Lowest precedence in top */
%nonassoc OptElse
%nonassoc ELSE
%left OR
%left AND
%left NOT
%left EQUAL LESS
%left PLUS MINUS
%left TIMES DIVIDE
//%left       /* Left associative */ 
//%nonassoc   /* Non associative*/
/** Highest precedence in bottom */

/** Types **/
%type <AbSyn.FunDec list> Prog
%type <AbSyn.FunDec list> FunDecs
%type <AbSyn.FunDec> FunDec
%type <AbSyn.StmtBlock> Block
%type <AbSyn.Dec list> DBlock
%type <AbSyn.Stmt list> SBlock
%type <AbSyn.Stmt list> StmtSeq
%type <AbSyn.Stmt> Stmt
%type <AbSyn.Exp option> Ret
%type <AbSyn.Exp> Exp
%type <AbSyn.Dec list> PDecl
%type <AbSyn.Dec list> Params
%type <AbSyn.Dec> Dec
%type <AbSyn.Dec list> Decs
%type <AbSyn.Type> Type
%type <AbSyn.Exp list> CallParams
%type <AbSyn.Exp list> Exps

%%

/* Rules  */
/* Program structure */
Prog : PROGRAM ID SEMICOLON FunDecs EOF     { $4 }
;

FunDecs : FunDecs FunDec                    { $1 @ [$2] }
        | FunDec                            { [$1] }
;

FunDec : FUNCTION ID LPAR PDecl RPAR COLON Type Block SEMICOLON { AbSyn.Func ($7, #1 $2, $4, $8, $1) }
                                                                /* Type, Identifier, PDecl, Block, func pos */
       | PROCEDURE ID  LPAR PDecl RPAR Block SEMICOLON          { AbSyn.Proc (#1 $2, $4, $6, $1) }
                                                                /* Identifier, PDecl, Block, proc pos */
;

Block : DBlock SBlock                       { AbSyn.Block ($1, $2) }
;

DBlock : VAR Decs                           { $2 }
       |                                    { [] }
;

SBlock : BEGIN StmtSeq SEMICOLON END        { $2 }
       | Stmt                               { [$1] }
;

StmtSeq : StmtSeq SEMICOLON Stmt            { $1 @ [$3] }
        | Stmt                              { [$1] }
;

/* Statements */
Stmt : ID LPAR CallParams RPAR              { AbSyn.ProcCall (#1 $1, $3, #2 $1) }
       /* OBS! Add precedence!! */
     | IF Exp THEN Block ELSE Block         { AbSyn.IfThEl($2, $4, $6, $1) }
     | IF Exp THEN Block %prec OptElse      { AbSyn.IfThEl($2, $4, AbSyn.Block([],[]), $1) }
     | WHILE Exp DO Block                   { AbSyn.While($2, $4, $1) }
     | RETURN Ret                           { AbSyn.Return($2, $1) }
     | ID ASSIGN Exp                        { AbSyn.Assign(AbSyn.Var(#1 $1), $3, #2 $1)}
     | ID LBRA Exps RBRA ASSIGN Exp         { AbSyn.Assign(AbSyn.Index(#1 $1, $3), $6, #2 $1)}
;

Ret : Exp                                   { SOME $1 }
    |                                       { NONE }
;

Exp : NUMLIT                                { AbSyn.Literal (AbSyn.BVal (AbSyn.Num (#1 $1)) , #2 $1) }
    | LOGLIT                                { AbSyn.Literal (AbSyn.BVal (AbSyn.Log (#1 $1)) , #2 $1) }
    | CHALIT                                { AbSyn.Literal (AbSyn.BVal (AbSyn.Chr (#1 $1)) , #2 $1) }
    | STRLIT                                { AbSyn.StrLit $1 }
    | LCBR Exps RCBR                        { AbSyn.ArrLit ($2, $1) }
    | ID                                    { AbSyn.LValue(AbSyn.Var (#1 $1),#2 $1)}
    | ID LBRA Exps RBRA                     { AbSyn.LValue(AbSyn.Index (#1 $1, $3), #2 $1)}
    | NOT Exp                               { AbSyn.Not ($2, $1) }
    | LPAR Exp RPAR                         { $2}
    | ID LPAR CallParams RPAR               { AbSyn.FunApp (#1 $1, $3, #2 $1) }
    | Exp PLUS Exp                          { AbSyn.Plus ($1, $3, $2) }
    | Exp MINUS Exp                         { AbSyn.Minus ($1, $3, $2) }
    | Exp TIMES Exp                         { AbSyn.Times($1, $3, $2) }
    | Exp DIVIDE Exp                        { AbSyn.Div($1, $3, $2) }
    | Exp EQUAL Exp                         { AbSyn.Equal($1, $3, $2) }
    | Exp LESS Exp                          { AbSyn.Less($1, $3, $2) }
    | Exp AND Exp                           { AbSyn.And($1, $3, $2) }
    | Exp OR Exp                            { AbSyn.Or($1, $3, $2) }
;

/* Variable and Parameter, Declarations, Types */
PDecl : Params                              { $1 }
      |                                     { [] }
;

Params : Params SEMICOLON Dec               { $1 @ [$3] }
       | Dec                                { [$1] }
;

Dec : ID COLON Type                         { AbSyn.Dec(#1 $1, $3, #2 $1) }
;

Decs : Decs Dec SEMICOLON                   { $1 @ [$2] }
     | Dec SEMICOLON                        { [$1] }
;

Type : INT                                  {AbSyn.Int $1}
     | CHAR                                 {AbSyn.Char $1}
     | BOOL                                 {AbSyn.Bool $1}
     | ARRAY OF Type                        {AbSyn.Array ($3,$1) }
;

/* Function and Procedure Parameters and Index Lists */
CallParams : Exps                           { $1 }
           |                                { [] }
;

Exps : Exp COMMA Exps                       { $1 :: $3 }
     | Exp                                  { [$1] }
;

/* Trailer*/
