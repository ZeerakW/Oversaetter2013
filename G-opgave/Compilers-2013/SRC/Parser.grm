/** Tokens **/

/* Literals */
%token <string*(int*int)> ID				/* Type, position(line, char position) */
%token <int*(int*int)> NUMLIT				/* Type, position (line,char position) */
%token <bool*(int*int)> LOGLIT              /* Type, position (line,char position) */
%token <char*(int*int)> CHALIT              /* Type, position (line,char position) */
%token <string*(int*int)> STRLIT            /* Type, position (line,char position) */

/* Keywords */
%token <(int*int)> PROGRAM FUNCTION PROCEDURE VAR BEGIN END IF THEN ELSE
%token <(int*int)> WHILE DO RETURN

/* Type Keywords */
%token <(int*int)> INT CHAR BOOL ARRAYOF OF

/* Symbols */
%token <(int*int)> SEMICOLON COLON COMMA ASSIGN EOF  /* ASSIGN = ':=' */

/* Arithmetic */
%token <(int*int)> PLUS MINUS TIMES DIVIDE EQUAL LESS AND OR NOT

/* Parantheses */
%token <(int*int)> LPAR RPAR RCBR LCBR LBRA RBRA    /* RCBR = Right Curly Brace, ... */

/* VARIOUS - Dont know if they are neccessary! */
%token <(int*int)> TRUE FALSE

%start Prog

/* Lowest precedence in top */
%right OR
%right AND
%nonassoc NOT
%nonassoc EQUAL LESS
%left PLUS MINUS
%left TIMES DIVIDE
//%left       /* Left associative */ 
//%nonassoc   /* Non associative*/
/** Highest precedence in bottom */

/** Types **/
%type <Absyn.Prog> Prog
%type <Absyn.FunDec list> FunDecs
%type <Absyn.FunDec> FunDec
%type <Absyn.StmtBlock> Block
%type <Absyn.Dec list> DBlock
%type <Absyn.Stmt list> SBlock
%type <Absyn.Stmt list> StmtSeq
%type <Absyn.Stmt> Stmt
%type <Absyn.LVAL> LVal
%type <Absyn.Exp> Ret
%type <Absyn.Exp> Exp
%type <Absyn.Exp> OP
%type <Absyn.Dec list> PDecl
%type <Absyn.Dec list> Params
%type <Absyn.Dec> Dec
%type <Absyn.Dec list> Decs
%type <Absyn.Type> Type
%type <Absyn.Exp list> CallParams
%type <Absyn.Exp list> Exps

%%

/* Rules  */
/* Program structure */
Prog : PROGRAM ID SEMICOLON FunDecs EOF     { $4 }
;

FunDecs : FunDecs FunDec                    { $1 @ [$2] }
        | FunDec                            { [$1] }
;

FunDec : FUNCTION ID LPAR PDecl RPAR COLON Type Block SEMICOLON { Absyn.Func ($7, #1 $2, $4, $8, $1) }
                                                                /* Type, Identifier, PDecl, Block, func pos */
       | PROCEDURE ID  LPAR PDecl RPAR Block SEMICOLON          { Absyn.Proc (#1 $2, $4, $6, $1) }
                                                                /* Identifier, PDecl, Block, proc pos */
;

Block : DBlock SBlock                       { ($1, $2) }
;

DBlock : VAR Decs                           { $2 }
       |                                    { [] }
;

SBlock : BEGIN StmtSeq SEMICOLON END        { $2 }
       | Stmt                               { [$1] }
;

StmtSeq : StmtSeq SEMICOLON Stmt            { $1 :: $3 }
        | Stmt                              { [$1] }
;

/* Statements */
Stmt : ID LPAR CallParams RPAR              { (#1 $1, $3, #2 $1) }
     | IF Exp THEN Block                    { ($2, $4, [], $1) }
     | IF Exp THEN Block ELSE Block         { ($2, $4, $6, $1) }
     | WHILE Exp DO Block                   { ($2, $4, $1) }
     | RETURN Ret                           { ($2, $1) }
     | LVal ASSIGN Exp                      { ($1, $3, #POSITION#)}
;

/* L-Values and Expressions */
LVal : ID                                   { (#1 $1) }
     | ID LBRA Exps RBRA                    { (#1 $1, $3) }
;

Ret : Exp                                   { $1 }
    |                                       { }
;

Exp : NUMLIT                                { AbSyn.Literal.Value.BVal.Num $1 }
    | LOGLIT                                { AbSyn.Literal.Value.BVal.Log $1 }
    | CHALIT                                { AbSyn.Literal.Value.BVal.Chr $1 }
    | STRLIT                                { AbSyn.StrLit $1 }
    | LCBR Exps RCBR                        { AbSyn.ArrLit $2 }
    | LVal                                  { AbSyn.LValue $1 }
    | NOT Exp                               { AbSyn.Not $2 }
    | Exp OP Exp                            { ($1, OP $2, $3) }
    | LPAR Exp RPAR                         {}
    | ID LPAR CallParams RPAR               {}
;

OP : PLUS                                   { AbSyn.Plus $1 }
   | MINUS                                  {}
   | TIMES                                  {}
   | DIVIDE                                 {}
   | EQUAL                                  {}
   | LESS                                   {}
   | AND                                    {}
   | OR                                     {}
;

/* Variable and Parameter, Declarations, Types */
PDecl : Params                              {}
      |                                     {}
;

Params : Params SEMICOLON Dec               {}
       | Dec                                {}
;

Dec : ID COLON Type                         {}
;

Decs : Decs Dec SEMICOLON                   {}
     | Dec SEMICOLON                        {}
;

Type : INT                                  {}
     | CHAR                                 {}
     | BOOL                                 {}
     | ARRAYOF                              {}
;

/* Function and Procedure Parameters and Index Lists */
CallParams : Exps                           {}
           |                                {}
;

Exps : Exp COMMA Exps                       {}
     | Exp                                  {}
;

/* Trailer*/
