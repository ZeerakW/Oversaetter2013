diff --git a/G-opgave/Compilers-2013/SRC/Lexer.lex b/G-opgave/Compilers-2013/SRC/Lexer.lex
index 6282778..cf7d837 100755
--- a/G-opgave/Compilers-2013/SRC/Lexer.lex
+++ b/G-opgave/Compilers-2013/SRC/Lexer.lex
@@ -12,11 +12,11 @@
  fun resetPos () = (currentLine :=1; lineStartPos := [0])
 
  fun getPos lexbuf = getLineCol (getLexemeStart lexbuf)
-				(!currentLine)
-				(!lineStartPos)
+                                (!currentLine)
+                                (!lineStartPos)
 
  and getLineCol pos line (p1::ps) =
-       if pos>=p1 then (line, pos-p1)
+       if pos >= p1 then (line, pos - p1)
        else getLineCol pos (line-1) ps
    | getLineCol pos line [] = raise LexicalError ("",(0,0))
 
@@ -29,38 +29,36 @@
    be to encode every keyword as a regexp. This one is much easier. *)
  fun keyword (s, pos) =
      case s of
-        "program"       => LL1Parser.TProgram   pos
-       | "function"     => LL1Parser.TFunction  pos
-       | "procedure"    => LL1Parser.TProcedure pos
-       | "var"          => LL1Parser.TVar       pos
-       | "begin"        => LL1Parser.TBegin     pos
-       | "end"          => LL1Parser.TEnd       pos
-       | "if"           => LL1Parser.TIf     pos
-       | "then"         => LL1Parser.TThen   pos
-       | "else"         => LL1Parser.TElse   pos
-       | "while"        => LL1Parser.TWhile  pos
-       | "do"           => LL1Parser.TDo     pos
-       | "return"       => LL1Parser.TReturn pos
-       | "array"        => LL1Parser.TArray  pos
-       | "of"           => LL1Parser.TOf     pos
-       | "int"          => LL1Parser.TInt    pos
-       | "bool"         => LL1Parser.TBool   pos
-       | "char"         => LL1Parser.TChar   pos
-       | "and"          => LL1Parser.TAnd    pos
-(* not active yet, not in LL1Parser
-       | "or"           => LL1Parser.TOr     pos
-       | "not"          => LL1Parser.TNot    pos
-*)
-       | "true"         => LL1Parser.TBLit (true, pos)
-       | "false"        => LL1Parser.TBLit (false, pos)
-
-       | _              => LL1Parser.TId (s, pos)
+         "program"      => Parser.PROGRAM    pos
+       | "function"     => Parser.FUNCTION   pos
+       | "procedure"    => Parser.PROCEDURE  pos
+       | "var"          => Parser.VAR        pos
+       | "begin"        => Parser.BEGIN      pos
+       | "end"          => Parser.END        pos
+       | "if"           => Parser.IF         pos
+       | "then"         => Parser.THEN       pos
+       | "else"         => Parser.ELSE       pos
+       | "while"        => Parser.WHILE      pos
+       | "do"           => Parser.DO         pos
+       | "return"       => Parser.RETURN     pos
+       | "array"        => Parser.ARRAY      pos
+       | "of"           => Parser.OF         pos
+       | "int"          => Parser.INT        pos
+       | "bool"         => Parser.BOOL       pos
+       | "char"         => Parser.CHAR       pos
+       | "and"          => Parser.AND        pos
+       | "or"           => Parser.OR         pos
+       | "not"          => Parser.NOT        pos
+       | "true"         => Parser.LOGLIT     (true, pos)
+       | "false"        => Parser.LOGLIT     (false, pos)
+       (* Else it must be a identifier *)
+       | _              => Parser.ID         (s, pos)
 
    (* "lex" will later be the generated function "Token" *)
    fun repeat lex b
               = let val res = lex b
                 in case res of
-                         LL1Parser.TEOF _ => []
+                         Parser.EOF _ => []
                        | other => other :: repeat lex b
                 end
 
@@ -74,53 +72,54 @@
 
 rule Token = parse
     [` ` `\t` `\r`]+    { Token lexbuf } (* whitespace *)
-  | "//" [^`\n`]*	{ Token lexbuf } (* comment *)
+  | "//" [^`\n`]*       { Token lexbuf } (* comment *)
   | [`\n` `\012`]       { currentLine := !currentLine+1;
                           lineStartPos :=  getLexemeStart lexbuf
-			                   :: !lineStartPos;
+                               :: !lineStartPos;
                           Token lexbuf } (* newlines *)
 
   | [`0`-`9`]+          { case Int.fromString (getLexeme lexbuf) of
                                NONE   => lexerError lexbuf "Bad integer"
-                             | SOME i => LL1Parser.TNLit (i, getPos lexbuf) }
+                             | SOME i => Parser.NUMLIT (i, getPos lexbuf) }
 
   | `'` ([` ` `!` `#`-`&` `(`-`[` `]`-`~`] | `\`[` `-`~`]) `'`
-                        { LL1Parser.TCLit
-			    ((case String.fromCString (getLexeme lexbuf) of
-			       NONE => lexerError lexbuf "Bad char constant"
-			     | SOME s => String.sub(s,1)),
-			     getPos lexbuf) }
+                        { Parser.CHALIT
+                            ((case String.fromCString (getLexeme lexbuf) of
+                               NONE => lexerError lexbuf "Bad char constant"
+                             | SOME s => String.sub(s,1)),
+                             getPos lexbuf) }
+
   | `"` ([` ` `!` `#`-`&` `(`-`[` `]`-`~`] | `\`[` `-`~`])* `"`
-                        { LL1Parser.TSLit
-			    ((case String.fromCString (getLexeme lexbuf) of
-			       NONE => lexerError lexbuf "Bad string constant"
-			     | SOME s => String.substring(s,1,
-							  String.size s - 2)),
-			     getPos lexbuf) }
+                        { Parser.STRLIT
+                            ((case String.fromCString (getLexeme lexbuf) of
+                               NONE => lexerError lexbuf "Bad string constant"
+                             | SOME s => String.substring(s,1,
+                                                          String.size s - 2)),
+                             getPos lexbuf) }
 
   | [`a`-`z` `A`-`Z`] [`a`-`z` `A`-`Z` `0`-`9` `_`]*
                         { keyword (getLexeme lexbuf,getPos lexbuf) }
 
-  | ":="                { LL1Parser.TAssign   (getPos lexbuf) }
-  | `+`                 { LL1Parser.TPlus     (getPos lexbuf) }
-  | `-`                 { LL1Parser.TMinus    (getPos lexbuf) }
-  | `*`                 { LL1Parser.TTimes    (getPos lexbuf) }
-  | `/`                 { LL1Parser.TSlash    (getPos lexbuf) }
-  | `=`                 { LL1Parser.TEq       (getPos lexbuf) }
-  | `<`                 { LL1Parser.TLess     (getPos lexbuf) }
-
-  | `(`                 { LL1Parser.TLParen   (getPos lexbuf) }
-  | `)`                 { LL1Parser.TRParen   (getPos lexbuf) }
-  | `[`                 { LL1Parser.TLBracket (getPos lexbuf) }
-  | `]`                 { LL1Parser.TRBracket (getPos lexbuf) }
-  | `{`                 { LL1Parser.TLCurly   (getPos lexbuf) }
-  | `}`                 { LL1Parser.TRCurly   (getPos lexbuf) }
-
-  | `,`                 { LL1Parser.TComma    (getPos lexbuf) }
-  | `;`                 { LL1Parser.TSemi     (getPos lexbuf) }
-  | `:`                 { LL1Parser.TColon    (getPos lexbuf) }
-
-  | eof                 { LL1Parser.TEOF      (getPos lexbuf) }
+  | ":="                { Parser.ASSIGN    (getPos lexbuf) }
+  | `+`                 { Parser.PLUS      (getPos lexbuf) }
+  | `-`                 { Parser.MINUS     (getPos lexbuf) }
+  | `*`                 { Parser.TIMES     (getPos lexbuf) }
+  | `/`                 { Parser.DIVIDE    (getPos lexbuf) }
+  | `=`                 { Parser.EQUAL     (getPos lexbuf) }
+  | `<`                 { Parser.LESS      (getPos lexbuf) }
+
+  | `(`                 { Parser.LPAR      (getPos lexbuf) }
+  | `)`                 { Parser.RPAR      (getPos lexbuf) }
+  | `[`                 { Parser.LBRA      (getPos lexbuf) }
+  | `]`                 { Parser.RBRA      (getPos lexbuf) }
+  | `{`                 { Parser.LCBR      (getPos lexbuf) }
+  | `}`                 { Parser.RCBR      (getPos lexbuf) }
+
+  | `,`                 { Parser.COMMA     (getPos lexbuf) }
+  | `;`                 { Parser.SEMICOLON (getPos lexbuf) }
+  | `:`                 { Parser.COLON     (getPos lexbuf) }
+
+  | eof                 { Parser.EOF       (getPos lexbuf) }
   | _                   { lexerError lexbuf "Illegal symbol in input" }
 
 ;
