diff --git a/G-opgave/Compilers-2013/SRC/Type.sml b/G-opgave/Compilers-2013/SRC/Type.sml
index a1e7714..c34bd89 100755
--- a/G-opgave/Compilers-2013/SRC/Type.sml
+++ b/G-opgave/Compilers-2013/SRC/Type.sml
@@ -156,28 +156,48 @@ struct
            | NONE    => raise Error("in type check variable, var "^id^" not in VTab, at ", pos)
         )
 
-    | typeCheckExp( vtab, AbSyn.LValue( AbSyn.Index(id, inds), pos ), _ ) =
-        (*************************************************************)
-        (*** TO DO: IMPLEMENT for G-ASSIGNMENT, TASK 4             ***)
-        (*** Suggested implementation STEPS:                       ***)
-        (***    1. check that the indexes, `inds', are int exps    ***)
-        (***       ( retorical question: what is the expected type ***)
-        (***         when calling typeOfExp on each index? )       ***)
-        (***    2. check that the type of `id' (the indexed array) ***)
-        (***       is an array type, `id_tp' (via vtab lookup)     ***)
-        (***       AND that the rank of `id_tp' equals the length  ***)
-        (***       of `inds', i.e., full indexing is expected,     ***)
-        (***       AND that the rank > 0                           ***)
-        (***    3. the result expression should be                 ***)
-        (***         LValue( Index ((id, id_tp), new_inds), pos )  ***)
-        (***       where `new_inds' are the typed version of `inds'***)
-        (*************************************************************)
-        raise Error( "in type check, indexed expression UNIMPLEMENTED, at ", pos)
-
-      (* Must be modified to complete task 3 *)
+    | typeCheckExp( vtab, AbSyn.LValue( AbSyn.Index(id, inds), pos ), etp ) =
+        (* Look up id in symbol table, and extract type *)
+        ( case SymTab.lookup id vtab of
+            SOME id_tp =>
+                let
+                    (* Check if id_tp is an array, and extract rank in case *)
+                    val (id_rank) = case id_tp of
+                        Array (r,_) => (r)
+                        | tp      => raise Error("in type checking call to array indexing, the variable is not an array, at", pos)
+                  
+                    (* Create new list of arguments with types attached *)
+                    val new_ids = map ( fn (e) => typeCheckExp(vtab, e, KnownType (BType Int))) inds
+
+                    (* Generate a list of types from the new arguments *)
+                    val ids_tps = map ( fn (e) => typeOfExp(e)) new_ids
+
+                    (* Check that all types in the list args_tps is BType Int by
+                    comparing and using binary AND operation on the result with
+                    all the other items in the list. *)
+                    val tpok = foldl (fn (e, b) => b andalso (BType Int) = e) true
+                                     (ids_tps)
+
+                    (* Get the rank of the indexes *)
+                    val rank = length inds
+                in
+                    (* If all is of type BType Int *)
+                    if tpok then
+                        (* If rank is bigger than zero *)
+                        if rank > 0 then
+                            (* If rank in vtable equals rank given in inds *)
+                            if id_rank = rank then
+                                LValue(Index((id, id_tp), new_ids), pos)
+                            else raise Error ("in type checking call to array indexing, rank is wrong, at", pos)
+                        else raise Error ("in type checking call to array indexing, rank cannot be zero, at ", pos)
+                    else raise Error ("in type checking call to array indexing, args not int, at ", pos)
+                end
+            | NONE    => raise Error("in type check variable, var "^id^" not in VTab, at ", pos)
+        )
+
     | typeCheckExp( vtab, AbSyn.Plus (e1, e2, pos), _ ) =
-        let val e1_new = typeCheckExp( vtab, e1, UnknownType )
-            val e2_new = typeCheckExp( vtab, e2, UnknownType )
+        let val e1_new = typeCheckExp( vtab, e1, KnownType (BType Int) )
+            val e2_new = typeCheckExp( vtab, e2, KnownType (BType Int) )
             val (tp1, tp2) = (typeOfExp e1_new, typeOfExp e2_new)
         in  if  typesEqual(BType Int, tp1) andalso typesEqual(BType Int, tp2)
             then Plus(e1_new, e2_new, pos)
@@ -185,10 +205,9 @@ struct
                              pp_type tp1^" and "^pp_type tp2^" at ", pos)
         end
 
-      (* Must be modified to complete task 3 *)
     | typeCheckExp( vtab, AbSyn.Minus (e1, e2, pos), _ ) =
-        let val e1_new = typeCheckExp(vtab, e1, UnknownType )
-            val e2_new = typeCheckExp(vtab, e2, UnknownType )
+        let val e1_new = typeCheckExp(vtab, e1, KnownType (BType Int) )
+            val e2_new = typeCheckExp(vtab, e2, KnownType (BType Int) )
             val (tp1, tp2) = (typeOfExp e1_new, typeOfExp e2_new)
         in  if  typesEqual(BType Int, tp1) andalso typesEqual(BType Int, tp2)
             then Minus(e1_new, e2_new, pos)
@@ -196,17 +215,31 @@ struct
                              pp_type tp1^" and "^pp_type tp2^" at ", pos)
         end
 
-    (* Task 2 and 3: Some type-checking of operators should occur here. *)
-    | typeCheckExp ( vtab, AbSyn.Times (_, _, pos), _ ) =
-        raise Error ( "Task 2 not implemented yet in type-checker ", pos )
-    | typeCheckExp ( vtab, AbSyn.Div   (_, _, pos), _ ) =
-        raise Error ( "Task 2 not implemented yet in type-checker ", pos )
+    | typeCheckExp ( vtab, AbSyn.Times (e1, e2, pos), _ ) =
+        let val e1_new = typeCheckExp(vtab, e1, KnownType (BType Int) )
+            val e2_new = typeCheckExp(vtab, e2, KnownType (BType Int) )
+            val (tp1, tp2) = (typeOfExp e1_new, typeOfExp e2_new)
+        in if  typesEqual(BType Int, tp1) andalso typesEqual(BType Int, tp2)
+           then Times(e1_new, e2_new, pos)
+           else raise Error("in type check times exp, one argument is not of int type "^
+                             pp_type tp1^" and "^pp_type tp2^" at ", pos)
+        end
 
-      (* Must be modified to complete task 3 *)
-    | typeCheckExp ( vtab, AbSyn.Equal(e1, e2, pos), _ ) =
-       let val e1_new = typeCheckExp(vtab, e1, UnknownType)
-            val e2_new = typeCheckExp(vtab, e2, UnknownType )
+    | typeCheckExp ( vtab, AbSyn.Div   (e1, e2, pos), _ ) =
+        let val e1_new = typeCheckExp(vtab, e1, KnownType (BType Int) )
+            val e2_new = typeCheckExp(vtab, e2, KnownType (BType Int) )
             val (tp1, tp2) = (typeOfExp e1_new, typeOfExp e2_new)
+        in if  typesEqual(BType Int, tp1) andalso typesEqual(BType Int, tp2)
+           then Div(e1_new, e2_new, pos)
+           else raise Error("in type check div exp, one argument is not of int type "^
+                             pp_type tp1^" and "^pp_type tp2^" at ", pos)
+        end
+
+    | typeCheckExp ( vtab, AbSyn.Equal(e1, e2, pos), _ ) =
+       let val e1_new = typeCheckExp(vtab, e1, UnknownType )
+            val tp1 = typeOfExp e1_new
+            val e2_new = typeCheckExp(vtab, e2, KnownType (tp1) )
+            val tp2 = typeOfExp e2_new
             (* check that tp1 is not an array type *)
             val () = case tp1 of
                        Array _ => raise Error("in type check equal, first expression "^pp_exp e1_new^
@@ -218,10 +251,9 @@ struct
                              pp_type tp1^" <> "^pp_type tp2^" at ", pos)
         end
 
-      (* Must be modified to complete task 3 *)
     | typeCheckExp ( vtab, AbSyn.Less (e1, e2, pos), _ ) =
-        let val e1_new = typeCheckExp(vtab, e1, UnknownType)
-            val e2_new = typeCheckExp(vtab, e2, UnknownType )
+        let val e1_new = typeCheckExp(vtab, e1, KnownType (BType Int))
+            val e2_new = typeCheckExp(vtab, e2, KnownType (BType Int) )
             val (tp1, tp2) = (typeOfExp e1_new, typeOfExp e2_new)
             (* check that tp1 is not an array type *)
             val () = case tp1 of
@@ -234,21 +266,35 @@ struct
                              pp_type tp1^" <> "^pp_type tp2^" at ", pos)
         end
 
-      (* Must be modified to complete task 3 *)
     | typeCheckExp ( vtab, AbSyn.And (e1, e2, pos), _ ) =
-        let val e1_new = typeCheckExp(vtab, e1, UnknownType )
-            val e2_new = typeCheckExp(vtab, e2, UnknownType )
+        let val e1_new = typeCheckExp(vtab, e1, KnownType (BType Bool) )
+            val e2_new = typeCheckExp(vtab, e2, KnownType (BType Bool) )
             val (tp1, tp2) = (typeOfExp e1_new, typeOfExp e2_new)
         in  if  typesEqual(BType Bool, tp1) andalso typesEqual(BType Bool, tp2)
             then And(e1_new, e2_new, pos)
             else raise Error("in type check and exp, one argument is not of bool type "^
                              pp_type tp1^" and "^pp_type tp2^" at ", pos)
         end
-    (* Task 2 and 3: Some type-checking of operators should occur here. *)
-    | typeCheckExp ( vtab, AbSyn.Or  (_, _, pos), _ ) =
-        raise Error ( "Task 2 not implemented yet in type-checker ", pos )
-    | typeCheckExp ( vtab, AbSyn.Not (_,    pos), _ ) =
-        raise Error ( "Task 2 not implemented yet in type-checker ", pos )
+
+    | typeCheckExp ( vtab, AbSyn.Or  (e1, e2, pos), _ ) =
+        let val e1_new = typeCheckExp(vtab, e1, KnownType (BType Bool) )
+            val e2_new = typeCheckExp(vtab, e2, KnownType (BType Bool) )
+            val (tp1, tp2) = (typeOfExp e1_new, typeOfExp e2_new)
+        in
+            if typesEqual(BType Bool, tp1) andalso typesEqual(BType Bool, tp2)
+            then Or(e1_new, e2_new, pos)
+            else raise Error("in type check or exp, one argument is not of bool type "^
+                              pp_type tp1^" or "^pp_type tp2^" at ", pos)
+        end
+
+    | typeCheckExp ( vtab, AbSyn.Not (e1,    pos), _ ) =
+        let val e1_new = typeCheckExp(vtab, e1, KnownType (BType Bool) )
+            val tp1 = typeOfExp e1_new
+        in  if  typesEqual(BType Bool, tp1)
+            then Not(e1_new, pos)
+            else raise Error("in type check not exp, one argument is not of bool type "^
+                              pp_type tp1^" at ", pos)
+        end
 
 
     (********************************************************************************)
@@ -273,6 +319,7 @@ struct
         raise Error("In type checking call to function len, "^
                     "len should take two args, an int and an array, given "^
                     Int.toString (length args) ^", at ", pos)
+
     | typeCheckExp ( vtab, AbSyn.FunApp ("read", [], pos), KnownType (BType btp) ) =
         FunApp( ( "read", ([], SOME (BType btp)) ), [], pos )
     | typeCheckExp ( vtab, AbSyn.FunApp ("read", [], pos), KnownType tp ) =
@@ -280,32 +327,41 @@ struct
                     "expected type is not a basic type: "^pp_type tp^", at ", pos)
     | typeCheckExp ( vtab, AbSyn.FunApp ("read", [], pos), _ ) =
         raise Error("in type check call to read, type inference fails because "^
-                    "of unknwon expected type, at ", pos)
+                    "of unknown expected type, at ", pos)
 
         (* function call to `new' uses expected type to infer the to-be-read result *)
     | typeCheckExp ( vtab, AbSyn.FunApp ("new", args, pos), etp ) =
         ( case expectedBasicType etp of
-            SOME btp => raise Error("in type check new UNIMPLEMENTED, i.e., G-ASSIGNMENT task 3, at ", pos)
-                        (*************************************************************)
-                        (*** Suggested implementation STEPS:                       ***)
-                        (***    1. type check recursively all `args', denote the   ***)
-                        (***          resulting (typed) arguments `new_args'.      ***)
-                        (***          (hint: the arguments of new should be ints,  ***)
-                        (***             hence expected type is ... ? )            ***)
-                        (***    2. get the types of `new_args' (via typeOfExp),    ***)
-                        (***          denote them `arg_tps'                        ***)
-                        (***    3. check that all `arg_tps' are ints, i.e,BType Int***)
-                        (***    4. type of the result array is                     ***)
-                        (***           `rtp = Array ( length args, btp )'          ***)
-                        (***         and check the rank of the array is > 0        ***)
-                        (***                                                       ***)
-                        (***    5. Result should be smth like                      ***)
-                        (***       `FunApp(                                        ***)
-                        (***          ("new", (arg_tps, SOME rtp)), new_args, pos  ***)
-                        (***        )'                                             ***)
-                        (*************************************************************)
+            SOME btp =>
+              let
+                (* Create new list of arguments with types attached *)
+                val new_args = map ( fn (e) => typeCheckExp(vtab, e, KnownType (BType Int))) args
+
+                (* Generate a list of types from the new arguments *)
+                val args_tps = map ( fn (e) => typeOfExp(e)) new_args
+
+                (* Check that all types in the list args_tps is BType Int by
+                   comparing and using binary AND operation on the result with
+                   all the other items in the list. *)
+                val tpok = foldl
+                           (fn (e, b) => b andalso (BType Int) = e) true
+                           (args_tps)
+                (* Get the rank of the arguments *)
+                val rank = length args
+
+                (* Calculate return type *)
+                val rtp = Array ( length args, btp )
+              in
+                (* If all is of type BType Int *)
+                if rank > 0 then
+                  if tpok
+                  then
+                    FunApp(("new", (args_tps, SOME rtp)), new_args, pos)
+                  else raise Error ("in type checking call to new, args not int, at ", pos)
+                else raise Error ("in type checking call to new, rank cannot be zero, at ", pos)
+              end
           | NONE     => raise Error("in type check call to new, type inference fails because "^
-                                    "of unknwon expected basic type, at ", pos) )
+                                    "of unknown expected basic type, at ", pos) )
 
         (* all the other, i.e., regular, function calls *)
     | typeCheckExp ( vtab, AbSyn.FunApp (fid, args, pos), _ ) =
@@ -335,8 +391,6 @@ struct
                              ", actual and formal argument types do not match, at ", pos)
         end
 
-
-
   (*******************************************************************************)
   (*******************************************************************************)
   (***       typeCheckStmt ( f : AbSyn.Stmt ) : TpAbSyn.Stmt                   ***)
