diff --git a/G-opgave/Compilers-2013/SRC/Compiler.sml b/G-opgave/Compilers-2013/SRC/Compiler.sml
index 7da97bc..1370ae7 100755
--- a/G-opgave/Compilers-2013/SRC/Compiler.sml
+++ b/G-opgave/Compilers-2013/SRC/Compiler.sml
@@ -201,13 +201,20 @@ struct
         in c1 @ c2 @ [Mips.SUB (place,t1,t2)]
         end
 
-    (* Task 2: Some code-generation of operators should occur here. *)
-(*
     | compileExp( vtable, Times(e1, e2, pos), place ) =
-        raise Error ( "Task 2 not implemented yet in code generator ", pos )
+        let val t1 = "times1_" ^ newName()
+            val c1 = compileExp(vtable, e1, t1)
+            val t2 = "times2_" ^ newName()
+            val c2 = compileExp(vtable, e2, t2)
+        in c1 @ c2 @ [Mips.MUL (place,t1,t2)]
+        end
     | compileExp( vtable, Div(e1, e2, pos), place ) =
-        raise Error ( "Task 2 not implemented yet in code generator ", pos )
-*)
+        let val t1 = "div1_" ^ newName()
+            val c1 = compileExp(vtable, e1, t1)
+            val t2 = "div2_" ^ newName()
+            val c2 = compileExp(vtable, e2, t2)
+        in c1 @ c2 @ [Mips.DIV(place,t1,t2)]
+        end
 
     | compileExp( vtable, Equal(e1, e2, _), place ) =
         let val t1 = "eq1_" ^ newName()
@@ -235,18 +242,28 @@ struct
             val c2 = compileExp(vtable, e2, t2)
             val lA = "_and_" ^ newName()
         in c1 (* do first part, skip 2nd part if already false *)
-           @ [Mips.MOVE (t1,place), Mips.BEQ (place, "0", lA) ]
+           @ [Mips.MOVE (place, t1), Mips.BEQ (place, "0", lA) ]
            @ c2 (* when here, t1 was  true, so the result is t2 *)
-           @ [Mips.MOVE (t2, place), Mips.LABEL lA ]
+           @ [Mips.MOVE (place, t2), Mips.LABEL lA ]
         end
 
-    (* Task 2: Some code-generation of operators should occur here. *)
-(*
     | compileExp( vtable, Or(e1, e2, pos), place ) =
-        raise Error ( "Task 2 not implemented yet in code generator ", pos )
+        let val t1 = "or1_" ^ newName()
+            val c1 = compileExp(vtable, e1, t1)
+            val t2 = "or2_" ^ newName()
+            val c2 = compileExp(vtable, e2, t2)
+            val lO = "_or_" ^ newName()
+        in c1 (* do first part, skip 2nd part if already true *)
+           @ [Mips.MOVE (place, t1), Mips.BNE (place, "0", lO) ]
+           @ c2 (* when here, t1 was false, so the result is t2 *)
+           @ [Mips.MOVE (place, t2), Mips.LABEL lO ]
+        end
+
     | compileExp( vtable, Not(e1, pos), place ) =
-        raise Error ( "Task 2 not implemented yet in code generator ", pos )
-*)
+        let val t1 = "not1_" ^ newName()
+            val c1 = compileExp(vtable, e1, t1)
+        in c1 @ [ Mips.XORI (place, t1, "1") ]
+        end
 
     | compileExp( vtab, FunApp (("len",(_,_)),args,pos), place ) =
        ( case args of
@@ -409,8 +426,19 @@ struct
             @ [Mips.MOVE (makeConst reg,t1)] (* store in reg *)
             , maxreg)
       end
-(** TASK 5: You may want to create a function slightly similar to putArgs,
- *  but instead moving args back to registers. **)
+   and rePutArgs [] vtable regs = []
+     | rePutArgs (LValue (Var(e, _), _)::es) vtable (re::regs) =
+      let
+         val st = ( case SymTab.lookup e vtable of
+           SOME x => x
+         | NONE => raise Error("Variable "^e^" not found in vtable", (0,0)))
+          val code = rePutArgs es vtable regs
+      in
+          [Mips.MOVE (st, re)] @ code
+      end
+      (* In case of anything else than variable name, we are not interested
+         in updating, since we cannot use the value anyway *)
+     | rePutArgs _ _ _ = []
 
 
   and compileLVal( vtab : VTab, Var (n,_) : LVAL, pos : Pos ) : Mips.mips list * Location =
@@ -422,6 +450,86 @@ struct
         raise Error("variable "^"n"^" with empty index, at ", pos)
 
     | compileLVal( vtab : VTab, Index ((n,t),inds) : LVAL, pos : Pos ) =
+        let
+            val place = "_cur_"^newName() (* Current memory location *)
+            val (line,_)= pos (* Extract line for error messages *)
+
+            fun checkInds(res_reg, place, inds) =
+                let
+                    val cond_reg = "_cond_"^newName()
+                    val cond_r   = "_cond_"^newName()
+                    val index    = "_index_"^newName()
+                    val e_reg    = "_tmp_"^newName()
+                    val arr_rank = length inds
+                    val arr = List.tabulate(arr_rank, fn x => x)
+                in
+                    foldl (fn ((arr,i),code) =>
+                        let
+                            val code_e     = compileExp(vtab, i, index)
+                            val code_check = [
+                              Mips.LW(e_reg, place, makeConst (arr*4)),
+                              Mips.SLT(cond_reg, index, "0"),
+                              Mips.XORI(cond_reg, cond_reg, "1"),
+                              Mips.SLT(cond_r, index, e_reg),
+                              Mips.AND(res_reg, cond_r, cond_reg),
+                              Mips.LI("5", makeConst line), (* Error at line *)
+                              Mips.BEQ(res_reg, "0", "_IllegalArrSizeError_")
+                            ]
+                        in
+                          if arr > arr_rank then raise Error("Too many dimensions!", pos) else
+                          code_e @ code_check @ code
+                        end
+                    ) [] (ListPair.zip (arr, inds))
+                end
+                fun computeFlatIndex(res, place, inds) =
+                let
+                    val arr_rank = length inds
+                    val idx  = (List.tabulate(arr_rank, fn x => x))
+                    val e_reg    = "_reg_"^newName()
+                    val tmp    = "_tmp_"^newName()
+                    val stride = "_stride_"^newName()
+                    val code_res_init = [ Mips.ADDI(res, "0", "0") ]
+                    val code_strides = foldl (fn ((i, e),code) =>
+                        let val code_e = compileExp(vtab, e, e_reg)
+                            val code_d = [ Mips.LW  (stride, place,   makeConst ((arr_rank+i)*4)),
+                                           Mips.MUL (tmp, stride, e_reg),
+                                           Mips.ADD (res, res, tmp) ]
+                        in
+                            if (i = arr_rank-1) then
+                                code_e @ [ Mips.ADD (res, "0", e_reg) ] @ code
+                            else
+                                code_e @ code_d @ code
+                        end
+                    ) [] ( ListPair.zip (idx, inds) )
+                in
+                    code_res_init @ code_strides
+                end
+        in ( case SymTab.lookup n vtab of
+            SOME reg => let
+                (* reg has memory location! *)
+                val check    = "_check_"^newName()
+                val res      = "_res_"^newName()
+                val tmp      = "_tmp_"^newName()
+                val code = checkInds(check, reg, inds) @
+                           computeFlatIndex(res, reg, inds)
+            val code = ( case t of
+                Array (_,Int) => code @
+                    [ Mips.LI(tmp, makeConst (length inds)),
+                      Mips.SLL(tmp, tmp, "3"),
+                      Mips.SLL(res, res, "2"), (* Int = 4 bytes *)
+                      Mips.ADD(res, res, tmp),
+                      Mips.ADD(res, res, reg) ]
+                | _ => code @
+                    [ Mips.LI(tmp, makeConst (length inds)),
+                      Mips.SLL(tmp, tmp, "3"),
+                      Mips.ADD(res, res, tmp),
+                      Mips.ADD(res, res, reg) ]
+                )
+            in
+                (code, Mem res)
+            end
+          | NONE => raise Error ("unknown variable "^n^" at, ", pos) )
+        end
         (*************************************************************)
         (*** TODO: IMPLEMENT for G-ASSIGNMENT, TASK 4              ***)
         (*** Sugested implementation STEPS:                        ***)
@@ -445,8 +553,6 @@ struct
         (***     Bonus question: can you implement it without      ***)
         (***                        using the stored strides?      ***)
         (*************************************************************)
-        raise Error( "indexed variables UNIMPLEMENTED, at ", pos)
-
 
   (* instr.s for one statement. exitLabel is end (for control flow jumps) *)
   and compileStmt( vtab, ProcCall (("write",_), [e], pos), _ ) =
@@ -503,9 +609,14 @@ struct
         | ProcCall ((n,_), es, p) => 
           let
               val (mvcode, maxreg) = putArgs es vtable minReg
+              val regs = List.tabulate (maxreg - minReg, (fn reg => makeConst (reg + (minReg))))
+              val rev_code = rePutArgs es vtable regs
           in
-              mvcode @ [Mips.JAL (n, List.tabulate (maxreg, fn reg => makeConst reg))]
+              mvcode
+              @ [Mips.JAL (n, regs)]
+              @ rev_code
           end
+
         | Assign (lv, e, p) =>
           let val (codeL,loc) = compileLVal(vtable, lv, p)
               val t = typeOfExp ( LValue(lv,p) )
@@ -588,12 +699,20 @@ struct
                                      ^")", pos)
           val (movePairs, vtable) = getMovePairs args [] minReg
           val argcode = map (fn (vname, reg) => Mips.MOVE (vname, reg)) movePairs
+          val argcode_rev = map (fn (vname, reg) => Mips.MOVE (reg, vname)) movePairs
+
           (** TASK 5: You need to add code to move variables back into callee registers,
            * i.e. something similar to 'argcode', just the other way round.  Use the
            * value of 'isProc' to determine whether you are dealing with a function
            * or a procedure. **)
           val body = compileStmts block vtable (fname ^ "_exit")
+          val reg_args = map (fn (_,r) => r) movePairs
+
           val (body1, _, maxr, spilled) =  (* call register allocator *)
+            if isProc then
+              RegAlloc.registerAlloc ( argcode @ body @ argcode_rev )
+                                     reg_args minReg maxCaller maxReg 0
+            else
               RegAlloc.registerAlloc ( argcode @ body )
                                      ["2"] minReg maxCaller maxReg 0
                                      (* 2 contains return val*)
