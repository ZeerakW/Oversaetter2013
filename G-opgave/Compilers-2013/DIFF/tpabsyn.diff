diff --git a/G-opgave/Compilers-2013/SRC/TpAbSyn.sml b/G-opgave/Compilers-2013/SRC/TpAbSyn.sml
index e13bb9b..e07adcf 100755
--- a/G-opgave/Compilers-2013/SRC/TpAbSyn.sml
+++ b/G-opgave/Compilers-2013/SRC/TpAbSyn.sml
@@ -41,13 +41,13 @@ struct
     | LValue  of LVAL              * Pos
     | Plus    of Exp * Exp         * Pos      (* e.g., x + 3 *)
     | Minus   of Exp * Exp         * Pos      (* e.g., x - 3 *)
- (* | Times   of Exp * Exp         * Pos      (* e.g., x * 3 *)
-    | Div     of Exp * Exp         * Pos      (* e.g., x / 3 *)         *)
+    | Times   of Exp * Exp         * Pos      (* e.g., x * 3 *)
+    | Div     of Exp * Exp         * Pos      (* e.g., x / 3 *)
     | Equal   of Exp * Exp         * Pos      (* e.g., x = 3 *)
     | Less    of Exp * Exp         * Pos      (* e.g., a < b *)
     | And     of Exp * Exp         * Pos      (* e.g., (x<1) and y *)
- (* | Or      of Exp * Exp         * Pos      (* e.g., (x=5) or y *)
-    | Not     of Exp               * Pos      (* e.g., not (x>3) *)      *)
+    | Or      of Exp * Exp         * Pos      (* e.g., (x=5) or y *)
+    | Not     of Exp               * Pos      (* e.g., not (x>3) *)
     | FunApp  of FIdent * Exp list * Pos      (* e.g., f(1, 3+x) *)
     | Map     of FIdent * Exp      * Pos      (* map(f,    {a1, ..., an}) == { f(a1), ..., f(an) }   *)
 
@@ -168,11 +168,15 @@ struct
     | pp_exp (ArrLit  (els, _, _))  = " { " ^ pp_exps els ^ " } "
     | pp_exp (LValue  (lv,     _))  = pp_Lval lv
 
+    | pp_exp (Times (e1, e2, _))    = "( " ^ pp_exp e1 ^ " * " ^ pp_exp e2 ^ " )"
+    | pp_exp (Div   (e1, e2, _))    = "( " ^ pp_exp e1 ^ " * " ^ pp_exp e2 ^ " )"
     | pp_exp (Plus  (e1, e2, _))    = "( " ^ pp_exp e1 ^ " + " ^ pp_exp e2 ^ " )"
     | pp_exp (Minus (e1, e2, _))    = "( " ^ pp_exp e1 ^ " - " ^ pp_exp e2 ^ " )"
     | pp_exp (Equal (e1, e2, _))    = "( " ^ pp_exp e1 ^ " = " ^ pp_exp e2 ^ " )"
     | pp_exp (Less  (e1, e2, _))    = "( " ^ pp_exp e1 ^ " < " ^ pp_exp e2 ^ " )"
     | pp_exp (And   (e1, e2, _))    = "( " ^ pp_exp e1 ^ " & " ^ pp_exp e2 ^ " )"
+    | pp_exp (Or    (e1, e2, _))    = "( " ^ pp_exp e1 ^ " | " ^ pp_exp e2 ^ " )"
+    | pp_exp (Not   (e1, _)    )    = "( not " ^ pp_exp e1 ^ " )"
 
     | pp_exp (FunApp ((nm,_), args, _)) = nm ^ "( " ^ pp_exps args ^ " )"
     | pp_exp (Map    ((nm,_), arr , _)) = "map ( " ^ nm ^ ", " ^ pp_exp arr ^ " ) "
@@ -332,11 +336,15 @@ struct
   fun typeOfExp ( Literal(v,  _) ) = typeOfVal v
     | typeOfExp ( StrLit (_,  _) ) = Array(1,Char)
     | typeOfExp ( ArrLit (_,t,_) ) = t
+    | typeOfExp ( Times  (a,b,_) ) = typeOfExp a
+    | typeOfExp ( Div    (a,b,_) ) = typeOfExp a
     | typeOfExp ( Plus   (a,b,_) ) = typeOfExp a
     | typeOfExp ( Minus  (a,b,_) ) = typeOfExp a
     | typeOfExp ( Equal  (_,_,_) ) = BType Bool
     | typeOfExp ( Less   (_,_,_) ) = BType Bool
     | typeOfExp ( And    (_,_,_) ) = BType Bool
+    | typeOfExp ( Or     (_,_,_) ) = BType Bool
+    | typeOfExp ( Not    (_,_)   ) = BType Bool
 
     | typeOfExp ( LValue (Var    (_,t)      , _) ) = t
     | typeOfExp ( LValue (Index ((v,t),inds), p) ) =
@@ -383,11 +391,15 @@ struct
     | posOfExp  ( StrLit (_,  p) ) = p
     | posOfExp  ( ArrLit (_,_,p) ) = p
     | posOfExp  ( LValue (_,  p) ) = p
+    | posOfExp  ( Times  (_,_,p) ) = p
+    | posOfExp  ( Div    (_,_,p) ) = p
     | posOfExp  ( Plus   (_,_,p) ) = p
     | posOfExp  ( Minus  (_,_,p) ) = p
     | posOfExp  ( Equal  (_,_,p) ) = p
     | posOfExp  ( Less   (_,_,p) ) = p
     | posOfExp  ( And    (_,_,p) ) = p
+    | posOfExp  ( Or     (_,_,p) ) = p
+    | posOfExp  ( Not    (_,p)   ) = p
     | posOfExp  ( FunApp (_,_,p) ) = p
     | posOfExp  ( Map    (_,_,p) ) = p
 
