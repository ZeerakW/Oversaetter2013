// Test prog production
program parserTest;

// First lets test functions
function test() : int // Simple function with no arguments
   return 0
;

function test2(a : int) : int // Function with arguments
   return a
;

procedure writeTest(c : char)
begin
   write(c);
end;

procedure main()
// Stating type of variables
var t : bool ; p : int; i : int; a : array of array of int; b : array of array of array of array of int;c : array of array of char;
begin
   write("Starting test of functions (including return)\n");
   if test()=0 and test2(5)=5 then
      write ("OK");
   write("\nStarting test of procedure definitions and procedure call\n");
   writeTest('c');
   write("\nStarting test of logical expressions/variables\n");
   t := true;
   write(false and false);
   write(t and false);
   write(false and t);
   write(t and true);
   // Not implemented in type checker
   write(false or false);
   write(true or false);
   write(false or true);
   write(true or true);
   write(not false);
   write(not true);
   //Output should be 0001011110
   write("\nTesting comparison operator\n");
   write(4=5);
   write(5=5);
   write(1+2+3=6);
   write('c'='d');
   write('a'='a');
   // Should be 01101
   write("\nTesting if-then\np = ");
   if true then
      p := 10;
   write(p);
   write("\nTesting if-then-else\np = ");
   if 1 = 2 then
      p := 5
   else
      p := 20;
   write(p);
   write("\nTesting mathematical operators in order: +, -, *, /\n");
   write("p + p = ");
   write(p + p);
   write("\np - p = ");
   write(p - p);
   write("\nTesting multiplication and division:");
   write("\np * p = ");
   write(p * p);
   write("\np / 2 = ");
   write(p / 2);
   write("\nTesting simple array literal\n");
   write({1, 3, 5, 7, 9});
   write("\nTesting while loop and less operator, write a sequence from 0 to 10\n");
   while (i < 11) do
   begin
      write(i);
      write(" ");
      i := i + 1;
   end;

   write("\nSymbol for ASCII number 247: ");
   write(chr(247));
   write("\nASCII number for symbol a  : ");
   write(ord('a'));
   
   // Test type inference for read.
   //write("\nPlease write an integer followed by a character\n");
   //if (chr(read()) = read()) then
   //   write("YaY")
   //else
   //   write("No match");
   //write(read() + read());
   //write(read() - read());
   //write(not read());
   // This one is quite epic (if first case is true, then it imediately returns true without checking the rest [This does not work in interpreter])
   //write(read() or read() and read());

   // Test new function
   write("\nArray testing\nLength of dim 1 in a (should be 2): ");
   a := new(2,3);
   b := new(2,3,5,6);
   write(len(0,a));
   // These two should fail with error from type checker
   //a:=new(); // Rank checking
   //a := new('f',4); // Arguments not int checking
   
   // Unimplemented
   // Testing array indexing
   a[1,2] := 1;
   write("\nDone with testing");   
   // Not implemented in type checker
end; // Main

